name: Unit Test Runner
on:
  workflow_call:
    inputs:
      recipe:
        description: 'The name of the Makefile recipe to run'
        default: 'ci-test'
        required: false
        type: string
      dependency_file:
        description: 'Name of the file containing 3rd-party dependencies'
        default: 'Gemfile.lock'
        required: false
        type: string
      dependency_cache_dirs:
        description: "Names of the directories containing 3rd-party dependencies"
        default: |
          /tmp/.docker-cache
          vendor/bundle
        required: false
        type: string
      debug:
        description: "Run the build with tmate debugging enabled"
        default: false
        required: false
        type: boolean

jobs:
  test:
    name: Runner
    runs-on: [ubuntu-latest]
    permissions:
      id-token: write
      contents: read

    steps:
    # https://github.com/actions/checkout/tree/v4?tab=readme-ov-file#usage
    - name: Setup - git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup - Determine root image
      id: root_image
      shell: bash
      run: |
        make print-ROOT_IMAGE
        echo value=$(make print-ROOT_IMAGE) >> ${GITHUB_OUTPUT}

    # https://github.com/docker/setup-buildx-action/tree/v3?tab=readme-ov-file#usage
    - name: Setup - Docker builder
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    # https://github.com/actions/checkout/tree/v4?tab=readme-ov-file#usage
    - name: Setup - Prepare dependency cache
      id: dependency-cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.dependency_cache_dirs }}
        key: dependency-cache-${{ steps.root_image.outputs.value }}-${{ hashFiles(inputs.dependency_file) }}
        restore-keys: |
          dependency-cache-${{ steps.root_image.outputs.value }}-

    # Note we can't use cache-hit to determine whether to skip this because of partial restores
    - name: Setup - Set dependency permissions
      env:
        DIRS: ${{ inputs.dependency_cache_dirs }}
      run: |
        IFS=$'\n'
        for dir in ${DIRS}; do
          if [ "${dir}" == "/tmp/.docker-cache" ]; then
            sudo mkdir -p ${dir}
            sudo chown -R $(id -u):$(id -g) ${dir}
          elif [ -d "${dir}" ]; then
            sudo chown -R root:root ${dir}
          fi
        done

    # Fixes actions/cache failing to save the vendor/bundle cache due to file ownership differing between
    # the host and the container (https://github.com/actions/toolkit/issues/946)
    - name: Setup - Fix tar permissions
      run: |
        sudo chown root /bin/tar && sudo chmod u+s /bin/tar

    # The version of tmate that comes with the mxschmitt/action-tmate hangs for 20s every 5min
    # https://github.com/tmate-io/tmate/issues/267
    - name: Debug - Install tmate
      if: ${{ steps.is_debug.outputs.value == 'true' }}
      id: install_tmate
      shell: bash
      run: |
        set -eu

        if which tmate; then
          echo "tmate already installed"
        else
          sudo apt-get update -qq
          sudo apt-get install -yq --no-install-recommends tmate
        fi

    # https://github.com/mxschmitt/action-tmate/tree/v3
    - name: Debug - Setup tmate session if requested
      if: ${{ steps.is_debug.outputs.value == 'true' }}
      # https://github.com/mxschmitt/action-tmate/tree/v3
      uses: mxschmitt/action-tmate@v3
      env:
        DOCKER_BUILD_OPTS: --load --cache-from=type=local,src=/tmp/.docker-cache --cache-to=type=local,dest=/tmp/.docker-cache,compression=zstd,mode=max
        RECIPE: ${{ inputs.recipe }}
      with:
        install-dependencies: false

    - name: App - Build base container image
      env:
        DOCKER_BUILD_OPTS: --load --cache-from=type=local,src=/tmp/.docker-cache --cache-to=type=local,dest=/tmp/.docker-cache,compression=zstd,mode=max
        BUNDLE_GEMFILE: ${{ inputs.dependency_file }}
      run: |
        make baseimage

    - name: App - Run CI
      env:
        BUNDLE_GEMFILE: ${{ inputs.dependency_file }}
        RECIPE: ${{ inputs.recipe }}
      run: |
        make ci

  # This job is required in order to define a repository-level ruleset that ensures the
  # unit test workflows complete regardless of the size of the test job matrix
  test-status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
    - name: Successful test
      if: ${{ !(contains(needs.*.result, 'failure')) }}
      run: exit 0

    - name: Failing test
      if: ${{ contains(needs.*.result, 'failure') }}
      run: exit 1
